---
version: '3'
services:
  # PostgreSQL Docker Compose Config
  orders-service-PostgreSQL:
    container_name: orders-service-PostgreSQL
    image: postgres:16
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hangzhoU@1
      PGDATA: /var/lib/postgresql/data # Set the PGDATA to persist data.
    volumes:
      - orders-service-PostgreSQL:/var/lib/postgresql/data
      # Copy the sql script to create devuser and database
      - ./sql/orders-service.sql:/docker-entrypoint-initdb.d/orders-service.sql
    restart: always

  inventory-service-PostgreSQL:
    container_name: inventory-service-PostgreSQL
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hangzhoU@1
      PGDATA: /var/lib/postgresql/data # Set the PGDATA to persist data.
    volumes:
      - inventory-service-PostgreSQL:/var/lib/postgresql/data
      # Copy the sql script to create devuser and database
      - ./sql/inventory-service.sql:/docker-entrypoint-initdb.d/inventory-service.sql
    restart: always

  # Mongo Docker Compose Config
  product-service-MongoDB:
    container_name: product-service-MongoDB
    image: mongo:7.0.2
    ports:
      - "27017:27017"
    volumes:
      - product-service-MongoDB:/data/db
    restart: always

  # Keycloak Config with MySQL database
  keycloak-MySQL:
    container_name: keycloak-MySQL
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    volumes:
      - keycloak-MySQL:/var/lib/mysql

  # Keycloak Docker Compose Config
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0.4
    command: ["start-dev", "--import-realm"]
    ports:
      - "8080:8080"
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./realms:/opt/keycloak/data/import/
    depends_on:
      - keycloak-MySQL

  # Kafka without Zookeeper Config
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

  # Zipkin
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"

  # eureka-server Project Config
  eureka-server:
    container_name: eureka-server
    image: umyuh1/eureka-server:latest
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - zipkin

  # spring-cloud-gateway Project Config
  spring-cloud-gateway:
    container_name: spring-cloud-gateway
    image: umyuh1/spring-cloud-gateway:latest
    ports:
      - "8181:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    depends_on:
      - zipkin
      - eureka-server
      - keycloak

  # product-service Project Config
  product-service:
    container_name: product-service
    image: umyuh1/product-service:latest
#    ports:
#      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - product-service-MongoDB
      - eureka-server
      - spring-cloud-gateway

  # orders-service Project Config
  orders-service:
    container_name: orders-service
    image: umyuh1/orders-service:latest
#    ports:
#      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - orders-service-PostgreSQL
      - broker
      - zipkin
      - eureka-server
      - spring-cloud-gateway

  # inventory-service Project Config
  inventory-service:
    container_name: inventory-service
    image: umyuh1/inventory-service:latest
#    ports:
#      - "8890:8890"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - inventory-service-PostgreSQL
      - eureka-server
      - spring-cloud-gateway

  # notification-service
  notification-service:
    container_name: notification-service
    image: umyuh1/notification-service:latest
#    ports:
#      - "8892:8892"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - eureka-server
      - spring-cloud-gateway
      - broker
      - zipkin

  # Prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.47.2
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - orders-service
      - notification-service

  #Grafana
  grafana:
    container_name: grafana
    image: grafana/grafana-oss:10.1.5
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

volumes:
  orders-service-PostgreSQL: #Create the volume to persist data.
  inventory-service-PostgreSQL:
  product-service-MongoDB:
  keycloak-MySQL:
  grafana:
